{"version":3,"sources":["utils/api.ts","constants/urls.ts","store/store.ts","store/ActionTypes.ts","components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["getData","url","a","fetch","response","json","getUsers","getTodos","initialState","isLoading","todos","store","createStore","state","action","type","payload","sort","b","title","localeCompare","Number","completed","user","name","filter","todo","id","mapDispatchToProps","deleteTodo","Todo","connect","props","deleteTodoItem","handleDelete","useCallback","className","onClick","TodoList","scope","map","key","dispatch","setLoaded","done","setLoadedData","setTodos","sortByTitle","sortByStatus","sortByUserName","handleClickLoad","Promise","all","then","usersFromApi","todosFromApi","find","userId","finally","length","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1a4a4b0.chunk.js","sourcesContent":["import { USERS_URL, TODOS_URL } from '../constants/urls';\n\nexport async function getData <T>(url: string): Promise<T> {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\nexport const getUsers = async (): Promise<User[]> => {\n  return getData<User[]>(USERS_URL);\n};\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  return getData<Todo[]>(TODOS_URL);\n};\n","export const USERS_URL = 'https://jsonplaceholder.typicode.com/users';\nexport const TODOS_URL = 'https://jsonplaceholder.typicode.com/todos';\n","import { createStore, AnyAction } from 'redux';\nimport {\n  IS_LOADED,\n  SET_TODOS,\n  SORT_BY_TITLE,\n  SORT_BY_STATUS,\n  SORT_BY_USERNAME,\n  DELETE_TODO,\n} from './ActionTypes';\n\n\nexport const setLoaded = (done: boolean) => ({ type: IS_LOADED, payload: done });\nexport const deleteTodo = (id: number) => ({ type: DELETE_TODO, payload: id });\n\nconst initialState: State = {\n  isLoading: false,\n  todos: [],\n};\n\nconst reducer = (state: State = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case IS_LOADED: {\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    }\n\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.payload,\n      };\n\n    case SORT_BY_TITLE:\n      return {\n        ...state,\n        todos: [...state.todos]\n          .sort((a, b) => a.title.localeCompare(b.title)),\n      };\n\n    case SORT_BY_STATUS:\n      return {\n        ...state,\n        todos: [...state.todos]\n          .sort((a, b) => Number(a.completed) - Number(b.completed)),\n      };\n\n    case SORT_BY_USERNAME:\n      return {\n        ...state,\n        todos: [...state.todos].sort((a, b) => a.user.name.localeCompare(b.user.name)),\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: [...state.todos].filter(todo => todo.id !== action.payload),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","export const IS_LOADED = 'IS_LOADING';\nexport const SET_TODOS = 'SET_TODOS';\nexport const SORT_BY_TITLE = 'SORT_BY_TITLE';\nexport const SORT_BY_STATUS = 'SORT_BY_STATUS';\nexport const SORT_BY_USERNAME = 'SORT_BY_USERNAME';\nexport const DELETE_TODO = 'DELETE_TODO';\n","import React, { FC, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { deleteTodo } from '../../store/store';\n\ninterface Props{\n  todo: TodoWithUsers;\n  deleteTodo: (id: number) => void;\n}\n\nexport const TodoItem: FC<Props> = (props) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = props.todo;\n\n  const { deleteTodo: deleteTodoItem } = props;\n\n  const handleDelete = useCallback(() => {\n    deleteTodoItem(id);\n  },\n  [deleteTodoItem, id]);\n\n  return (\n    <>\n      <td className=\"table__cell\">{id}</td>\n      <td className=\"table__cell\">{user ? user.name : ''}</td>\n      <td className=\"table__cell\">{title}</td>\n      <td className=\"table__cell\">{completed ? 'done' : 'not done'}</td>\n      <td className=\"table__cell\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleDelete}\n        >\n          Delete\n        </button>\n      </td>\n    </>\n  );\n};\n\nconst mapDispatchToProps = { deleteTodo };\n\nexport const Todo = connect(null, mapDispatchToProps)(TodoItem);\n","import React, { FC } from 'react';\nimport './TodoList.css';\n\nimport { Todo } from '../Todo/Todo';\n\ninterface Props{\n  todos: TodoWithUsers[];\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  return (\n    <>\n      <table className=\"table\">\n        <thead className=\"table__title\">\n          <tr>\n            <th className=\"table__cell\" scope=\"col\">ID</th>\n            <th className=\"table__cell\" scope=\"col\">User</th>\n            <th className=\"table__cell\" scope=\"col\">Title</th>\n            <th className=\"table__cell\" scope=\"col\">Status</th>\n            <th className=\"table__cell\" scope=\"col\">Delete</th>\n          </tr>\n        </thead>\n        <tbody>\n          {todos.map(todo => (\n            <tr\n              className=\"table__row\"\n              key={todo.id}\n            >\n              <Todo todo={todo} />\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport { getUsers, getTodos } from './utils/api';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { setLoaded as setLoadedData } from './store/store';\n\nimport './App.css';\n\ninterface Props {\n  todos: TodoWithUsers[];\n  isLoading: boolean;\n  setLoaded: (done: boolean) => void;\n  setTodos: (todos: TodoWithUsers[]) => void;\n  sortByTitle: () => void;\n  sortByUserName: () => void;\n  sortByStatus: () => void;\n}\n\nconst App: FC<Props> = (props) => {\n  const {\n    todos,\n    isLoading,\n    setLoaded,\n    setTodos,\n    sortByTitle,\n    sortByUserName,\n    sortByStatus,\n  } = props;\n\n  const handleClickLoad = () => {\n    setLoaded(true);\n\n    Promise.all([getUsers(), getTodos()])\n      .then(([usersFromApi, todosFromApi]) => {\n        setTodos(todosFromApi.map(todo => ({\n          ...todo,\n          user: usersFromApi.find(user => user.id === todo.userId) as User,\n        })));\n      })\n      .finally(() => setLoaded(false));\n  };\n\n  if (!todos.length) {\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">Dynamic list of TODOs</h1>\n        <>\n          <button\n            type=\"button\"\n            className=\"button button-start\"\n            onClick={handleClickLoad}\n            disabled={isLoading}\n          >\n            Load\n          </button>\n        </>\n        {isLoading && (\n          <p className=\"text\">Loading...</p>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Dynamic list of TODOs</h1>\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={sortByUserName}\n        >\n          Sort by name~\n        </button>\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={sortByTitle}\n        >\n          Sort by title\n        </button>\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={sortByStatus}\n        >\n          Sort by readiness\n        </button>\n      </div>\n      <TodoList todos={todos} />\n\n      {!todos.length && (\n        <button type=\"button\" onClick={handleClickLoad} disabled={isLoading}>\n          {isLoading ? 'Loading...' : 'Load Todos'}\n        </button>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => {\n  return {\n    todos: state.todos,\n    isLoading: state.isLoading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    setLoaded: (done: boolean) => dispatch(setLoadedData(done)),\n    setTodos: (todos: TodoWithUsers[]) => dispatch({ type: 'SET_TODOS', payload: todos }),\n    sortByTitle: () => dispatch({ type: 'SORT_BY_TITLE' }),\n    sortByStatus: () => dispatch({ type: 'SORT_BY_STATUS' }),\n    sortByUserName: () => dispatch({ type: 'SORT_BY_USERNAME' }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}